#version 460

const float MATH_PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;

struct BVHNode 
{
    vec4 minBounds;
    vec4 maxBounds;
};

struct Ray 
{
    vec3 origin;
    vec3 dir;
};

struct AreaLight 
{
    vec4 position;  // Center of the area light
    vec4 normal;    // Orientation of the light (for rectangular lights)
    vec4 intensity; // Color/intensity of the light (e.g., RGB or single value)
    vec4 size;      // Width and height of the rectangle
};

struct HitInfo 
{
    float t;        // Distance to hit
    vec3 position;  // Hit position
    vec3 normal;    // Surface normal
    uint triIdx;    // Triangle index (for material lookup later)
    bool hit;       // True if a hit occurred
};

struct PushConstants
{
    uint sample_batch;
};



layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform PushConsts
{
    PushConstants pushConstants;
};

layout(binding = 0, set = 0, rgba32f) uniform image2D outputImage;

layout(binding = 1, set = 0) readonly buffer VertexBuffer
{
    float vertices[];
};

layout(binding = 2, set = 0) readonly buffer IndexBuffer
{
    uint indices[];
};

layout(binding = 3, set = 0) readonly buffer BVHBuffer 
{
    BVHNode nodes[];
};

layout(std140, binding = 4) uniform CameraBuffer 
{
    vec3 cameraPos;
    vec3 cameraDir;
    vec3 cameraUp;
    vec3 fov;
} camera;

layout(binding = 5, set = 0) buffer AreaLights 
{
    AreaLight lights[];
} areaLights;

vec3 getVertex(uint vertexIndex) 
{
    uint offset = vertexIndex * 3;
    return vec3(vertices[offset], vertices[offset + 1], vertices[offset + 2]);
}

bool intersectAABB(Ray ray, vec3 minBounds, vec3 maxBounds, out float tMin, out float tMax) 
{
    vec3 invDir = 1.0 / ray.dir;
    vec3 t0 = (minBounds - ray.origin) * invDir;
    vec3 t1 = (maxBounds - ray.origin) * invDir;
    vec3 tNear = min(t0, t1);
    vec3 tFar = max(t0, t1);
    tMin = max(max(tNear.x, tNear.y), tNear.z);
    tMax = min(min(tFar.x, tFar.y), tFar.z);
    return tMin <= tMax && tMax >= 0.0;
}

bool intersectTriangle(Ray ray, vec3 v0, vec3 v1, vec3 v2, out float t) 
{
    const float EPSILON = 0.000001; // Small value to avoid floating-point errors

    // Triangle edges
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;

    // Calculate determinant (ray-plane parallelism check)
    vec3 rayCrossEdge2 = cross(ray.dir, edge2);
    float determinant = dot(edge1, rayCrossEdge2);

    // If determinant is near zero, ray is parallel to triangle
    if (abs(determinant) < EPSILON) return false;


    // Inverse determinant for scaling barycentric coordinates
    float invDeterminant = 1.0 / determinant;

    // Vector from triangle vertex v0 to ray origin
    vec3 originToVertex = ray.origin - v0;

    // Compute barycentric coordinate u (first coordinate)
    float u = invDeterminant * dot(originToVertex, rayCrossEdge2);
    if (u < 0.0 || u > 1.0) return false; // Outside triangle bounds


    // Compute barycentric coordinate v (second coordinate)
    vec3 originCrossEdge1 = cross(originToVertex, edge1);
    float v = invDeterminant * dot(ray.dir, originCrossEdge1);
    if (v < 0.0 || u + v > 1.0) return false; // Outside triangle bounds

    // Compute distance t along ray where intersection occurs
    t = invDeterminant * dot(edge2, originCrossEdge1);
    return t > EPSILON; // Valid intersection if t is positive
}

HitInfo traceRay(Ray ray) 
{
    HitInfo hitInfo = HitInfo(1e30, vec3(0.0), vec3(0.0), 0, false);
    float closestT = 1e30;
    int stack[32];
    int stackPtr = 0;
    stack[stackPtr++] = 0;

    while (stackPtr > 0) 
    {
        int nodeIdx = stack[--stackPtr];
        BVHNode node = nodes[nodeIdx];
        float tMin, tMax;
        if (intersectAABB(ray, node.minBounds.xyz, node.maxBounds.xyz, tMin, tMax)) 
        {
            int leftChild = int(node.minBounds.w);
            int rightChild = int(node.maxBounds.w);

            if (leftChild == -1) 
            {
                uint triIdx = uint(rightChild) * 3;
                vec3 v0 = getVertex(indices[triIdx]);
                vec3 v1 = getVertex(indices[triIdx + 1]);
                vec3 v2 = getVertex(indices[triIdx + 2]);
                float t;
                
                if (intersectTriangle(ray, v0, v1, v2, t) && t < hitInfo.t) 
                {
                    hitInfo.t = t;
                    hitInfo.position = ray.origin + ray.dir * t;
                    hitInfo.normal = normalize(cross(v1 - v0, v2 - v0)); // Simple normal
                    hitInfo.triIdx = uint(rightChild);
                    hitInfo.hit = true;
                }
            } 
            else 
            {
                stack[stackPtr++] = leftChild;
                stack[stackPtr++] = rightChild;
            }
        }
    }
    return hitInfo;
}

// Simple random number generator (for diffuse sampling)
uint rngState;

float stepAndOutputRNGFloat(inout uint rngState) 
{
    rngState    = rngState * 747796405u + 2891336453u;
    uint result = ((rngState >> ((rngState >> 28u) + 4u)) ^ rngState) * 277803737u;
    result      = (result >> 22u) ^ result;

    return float(result) / 4294967295.0;
}

vec2 randomGaussian(inout uint rngState) 
{
    const float u1      = max(1e-38, stepAndOutputRNGFloat(rngState));
    const float u2      = stepAndOutputRNGFloat(rngState);
    const float r       = sqrt(-2.0 * log(u1));
    const float theta   = 2.0 * MATH_PI * u2;

    return r * vec2(cos(theta), sin(theta));
}

// Sample cosine-weighted hemisphere
vec3 sampleHemisphere(vec3 normal, inout uint rngState) 
{
    float r1        = stepAndOutputRNGFloat(rngState);
    float r2        = stepAndOutputRNGFloat(rngState);
    float theta     = acos(sqrt(1.0 - r1));
    float phi       = 2.0 * MATH_PI * r2;
    vec3 localDir   = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

    // Align with normal
    vec3 up         = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent    = normalize(cross(up, normal));
    vec3 bitangent  = cross(normal, tangent);

    return tangent * localDir.x + bitangent * localDir.y + normal * localDir.z;
}

// Sample uniform direction over full sphere
vec3 sampleSphere(inout uint rngState) 
{
    float z     = 2.0 * stepAndOutputRNGFloat(rngState) - 1.0; // [-1, 1]
    float theta = 2.0 * MATH_PI * stepAndOutputRNGFloat(rngState); // [0, 2Ï€]
    float r     = sqrt(1.0 - z * z); // Radius in xy-plane
    
    return vec3(r * cos(theta), r * sin(theta), z); // Unit vector
}

vec3 sampleAreaLight(AreaLight light, inout uint rngState) 
{
    float u     = stepAndOutputRNGFloat(rngState) * 2.0 - 1.0; // [-1, 1]
    float v     = stepAndOutputRNGFloat(rngState) * 2.0 - 1.0; // [-1, 1]
    
    // Robust tangent space: Avoid parallel vectors
    vec3 n      = normalize(light.normal.xyz); // Ensure normal is normalized
    vec3 basis  = abs(n.y) < 0.999 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
    vec3 right  = normalize(cross(n, basis));
    vec3 up     = cross(right, n);
    
    vec3 point  = light.position.xyz + (right * u * light.size.x * 0.5) + (up * v * light.size.y * 0.5);
    return point;
}

// Helper function to intersect a ray with an area light
bool intersectAreaLight(Ray ray, AreaLight light, out float t, out vec3 hitPos) 
{
    // Plane intersection: t = dot(normal, (planePoint - rayOrigin)) / dot(normal, rayDir)
    float denom = dot(light.normal.xyz, ray.dir);
    if (abs(denom) < 0.0001) return false; // Ray parallel to light plane
    
    vec3 planePoint = light.position.xyz;
    t = dot(light.normal.xyz, planePoint - ray.origin) / denom;
    if (t <= 0.0) return false; // Intersection behind ray origin
    
    hitPos = ray.origin + ray.dir * t;
    
    // Transform hit position into light's local space with robust tangent space
    vec3 n      = normalize(light.normal.xyz); // Ensure normal is normalized
    vec3 basis  = abs(n.y) < 0.999 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
    vec3 right  = normalize(cross(n, basis));
    vec3 up     = cross(right, n);
    
    vec3 toHit  = hitPos - light.position.xyz;
    
    float u     = dot(toHit, right); // Projection along "width" axis
    float v     = dot(toHit, up);    // Projection along "height" axis
    
    // Check if hit is within light bounds
    float halfWidth     = light.size.x * 0.5;
    float halfHeight    = light.size.y * 0.5;
    return abs(u) <= halfWidth && abs(v) <= halfHeight;
}

vec3 pathTrace(Ray ray, uint seed)
{
    vec3 throughput     = vec3(1.0);
    vec3 radiance       = vec3(0.0);
    const int MAX_DEPTH = 4;
    const float OFFSET  = 0.001;

    rngState = seed;

    // Check for direct intersection with area lights first
    uint lightCount = uint(areaLights.lights.length());
    for (int i = 0; i < lightCount; ++i) 
    {
        AreaLight light = areaLights.lights[i];
        float t;
        vec3 hitPos;
        if (intersectAreaLight(ray, light, t, hitPos)) 
        {
            // Check if the light is occluded by scene geometry
            Ray shadowRay = Ray(ray.origin, ray.dir);
            HitInfo shadowHit = traceRay(shadowRay);
            if (!shadowHit.hit || shadowHit.t > t) 
            {
                // No occlusion or hit is beyond light; show light directly
                radiance = light.intensity.xyz;
                return radiance;
            }
        }
    }

    // If no direct light hit, proceed with regular path-tracing
    for (int depth = 0; depth < MAX_DEPTH; ++depth) 
    {
        HitInfo hit = traceRay(ray);
        if (!hit.hit) 
        {
            radiance += throughput * vec3(0.0); // Background color
            break;
        }

        // Direct lighting from all area lights
        vec3 albedo     = vec3(0.8);
        vec3 directLight = vec3(0.0);
        uint lightCount = uint(areaLights.lights.length());

        for (int i = 0; i < lightCount; ++i) 
        {
            AreaLight light = areaLights.lights[i];
            
            // Sample a random point on the area light
            vec3 lightPoint = sampleAreaLight(light, rngState);
            vec3 lightDir   = normalize(lightPoint - hit.position);
            float diffuse   = max(dot(hit.normal, lightDir), 0.0);

            // Shadow ray to the sampled point
            Ray shadowRay   = Ray(hit.position + hit.normal * OFFSET, lightDir);
            HitInfo shadowHit = traceRay(shadowRay);
            float lightDist = length(lightPoint - hit.position);

            if (!shadowHit.hit || shadowHit.t >= lightDist - OFFSET) 
            {
                // Attenuate by distance (inverse square law) and area light intensity
                float distSqr   = lightDist * lightDist;
                vec3 lightContrib = light.intensity.xyz * diffuse * (1.0 / max(distSqr, 0.01));
                directLight    += albedo * lightContrib;
            }
        }
        radiance += throughput * directLight;


        // Subsurface scattering (multi-bounce random walk)
        vec3 sssAlbedo      = vec3(1.0, 0.2, 0.1);
        float sssRadius     = 1.0;
        const int SSS_MAX_BOUNCES = 3;
        vec3 sssThroughput  = vec3(1.0);

        Ray sssRay = Ray(hit.position - hit.normal * OFFSET, sampleSphere(rngState));

        for (int sssDepth = 0; sssDepth < SSS_MAX_BOUNCES; ++sssDepth) 
        {
            HitInfo sssHit = traceRay(sssRay);
            if (!sssHit.hit) break;

            float travelDist = sssHit.t;
            vec3 currentPos  = sssRay.origin + sssRay.dir * travelDist;

            // Check visibility to all area lights
            vec3 sssLight = vec3(0.0);
            for (int i = 0; i < lightCount; ++i) 
            {
                AreaLight light     = areaLights.lights[i];
                vec3 lightPoint     = sampleAreaLight(light, rngState);
                vec3 exitLightDir   = normalize(lightPoint - currentPos);
                float exitDiffuse   = max(dot(sssHit.normal, exitLightDir), 0.0);
                Ray exitShadowRay   = Ray(currentPos + sssHit.normal * OFFSET, exitLightDir);
                HitInfo exitShadowHit = traceRay(exitShadowRay);
                float exitLightDist = length(lightPoint - currentPos);

                if (!exitShadowHit.hit || exitShadowHit.t >= exitLightDist - OFFSET) 
                {
                    float distSqr = exitLightDist * exitLightDist;
                    sssLight += sssAlbedo * exitDiffuse * light.intensity.xyz * (1.0 / max(distSqr, 0.01));
                }
            }
            radiance += throughput * sssThroughput * sssLight * (1.0 + sssRadius * 0.5);

            sssThroughput *= sssAlbedo * exp(-travelDist / (sssRadius * 1.5));
            sssRay = Ray(currentPos - sssHit.normal * OFFSET, sampleSphere(rngState));
        }


        // Indirect lighting
        vec3 bounceDir  = sampleHemisphere(hit.normal, rngState);
        throughput      *= albedo * dot(hit.normal, bounceDir);
        ray             = Ray(hit.position + hit.normal * OFFSET, bounceDir);
    }

    return radiance;
}

void main()
{   
    const ivec2 resolution  = imageSize(outputImage);
    const uvec2 pixel       = gl_GlobalInvocationID.xy;

    if (pixel.x >= uint(resolution.x) || pixel.y >= uint(resolution.y)) 
    {
        return;
    }

    float ndcX      = (2.0 * float(pixel.x) / float(resolution.x)) - 1.0;
    float ndcY      = (2.0 * float(pixel.y) / float(resolution.y)) - 1.0;
    float aspect    = float(resolution.x)   / float(resolution.y);

    // Seed RNG with pixel coords and sample batch
    uint seed       = uint((pushConstants.sample_batch * resolution.y + pixel.y) * resolution.x + pixel.x);
    rngState        = seed;



    // Depth of field parameters
    float aperture      = 0.02; // Aperture size (controls blur strength)
    float focalDistance = 3.0; // Distance to focal plane

    // Jitter ray origin for depth of field
    vec2 apertureOffset = randomGaussian(rngState) * aperture;
    vec3 right          = normalize(cross(camera.cameraDir, -camera.cameraUp));
    vec3 up             = normalize(cross(right, camera.cameraDir));
    vec3 newOrigin      = camera.cameraPos + right * apertureOffset.x + up * apertureOffset.y;

    // Add jitter to NDC coordinates (anti-aliasing)
    vec2 jitter         = randomGaussian(rngState);
    float jitterScale   = 0.5; // Scale to keep jitter within half a pixel
    ndcX                += jitter.x * jitterScale / float(resolution.x);
    ndcY                += jitter.y * jitterScale / float(resolution.y);

    // Compute focal point and new ray direction
    float tanFov        = tan(radians(camera.fov.x * 0.5));
    vec3 baseDir        = normalize(camera.cameraDir + (ndcX * tanFov * aspect) * -right - (ndcY * tanFov) * up);
    vec3 focalPoint     = camera.cameraPos + baseDir * focalDistance;
    vec3 rayDir         = normalize(focalPoint - newOrigin);

    

    Ray ray             = Ray(newOrigin, rayDir);
    vec3 color          = pathTrace(ray, seed);

    vec4 prevColor      = imageLoad(outputImage, ivec2(pixel));
    vec4 newColor       = (prevColor * float(pushConstants.sample_batch) + vec4(color, 1.0)) / float(pushConstants.sample_batch + 1);
    imageStore(outputImage, ivec2(pixel), newColor);
}